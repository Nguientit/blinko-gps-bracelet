const productsData = require("../data/database.json");

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// ƒê√¢y l√† URL c·ªßa PROXY C·ª¶A B·∫†N (ƒë√£ deploy ·ªü B∆∞·ªõc 1)
const PROXY_URL = process.env.GEMINI_PROXY_URL || "https://gemini-proxy.nguyenpq65.workers.dev";

// ƒê√¢y l√† ƒê∆Ø·ªúNG D·∫™N API c·ªßa Google m√† ch√∫ng ta mu·ªën g·ªçi
const API_PATH = "/v1beta/models/gemini-2.5-flash:generateContent";

if (!GEMINI_API_KEY) {
  console.error("L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong file .env");
} else {
  console.log(`[Config] ƒê√£ n·∫°p API Key (b·∫Øt ƒë·∫ßu b·∫±ng: ${GEMINI_API_KEY.substring(0, 4)}...)`);
}

function extractPriceFilter(message) {
  const text = message.toLowerCase()

  const rangeMatch = text.match(
    /t·ª´\s*(\d+(?:[.,]?\d+)?)\s*(k|ngh√¨n|tri·ªáu|tr)?\s*(?:ƒë·∫øn|t·ªõi|-)\s*(\d+(?:[.,]?\d+)?)\s*(k|ngh√¨n|tri·ªáu|tr)?/,
  )
  if (rangeMatch) {
    let min = Number.parseFloat(rangeMatch[1])
    let max = Number.parseFloat(rangeMatch[3])
    const u1 = rangeMatch[2] || ""
    const u2 = rangeMatch[4] || ""
    if (u1.includes("k") || u1.includes("ngh√¨n")) min *= 1000
    if (u1.includes("tri·ªáu") || u1.includes("tr")) min *= 1000000
    if (u2.includes("k") || u2.includes("ngh√¨n")) max *= 1000
    if (u2.includes("tri·ªáu") || u2.includes("tr")) max *= 1000000
    return { min, max }
  }

  const singleMatch = text.match(/(\d+(?:[.,]?\d+)?)\s*(k|ngh√¨n|tri·ªáu|tr)?/)
  if (!singleMatch) return null

  let amount = Number.parseFloat(singleMatch[1])
  const unit = singleMatch[2] || ""
  if (unit.includes("k") || unit.includes("ngh√¨n")) amount *= 1000
  if (unit.includes("tri·ªáu") || unit.includes("tr")) amount *= 1000000

  if (text.includes("d∆∞·ªõi") || text.includes("√≠t h∆°n") || text.includes("<")) return { max: amount }
  if (text.includes("tr√™n") || text.includes("cao h∆°n") || text.includes(">")) return { min: amount }
  if (text.includes("kho·∫£ng") || text.includes("t·∫ßm") || text.includes("g·∫ßn")) return { around: amount }

  return null
}

function buildSystemPrompt(filteredProducts) {
  return `
B·∫°n l√† **BlinkoBot ü§ñ**, tr·ª£ l√Ω AI th√¢n thi·ªán c·ªßa c·ª≠a h√†ng ƒë·ªìng h·ªì ƒë·ªãnh v·ªã GPS cho tr·∫ª em Blinko.

‚≠ê TI√äU CH√ç T∆Ø V·∫§N CHUNG:
- **T·∫≠p trung v√†o an to√†n**: Lu√¥n nh·∫•n m·∫°nh c√°c t√≠nh nƒÉng nh∆∞ ƒë·ªãnh v·ªã GPS.
- **T·∫≠p trung v√†o s·ªü th√≠ch c·ªßa b√©**: G·ª£i √Ω m√†u s·∫Øc, thi·∫øt k·∫ø ph√π h·ª£p.
- **Phong c√°ch**: Gi·ªçng vui t∆∞∆°i, th√¢n thi·ªán, chuy√™n nghi·ªáp (d√πng icon ‚ú®üòÑüëç).
- **ƒê·ªãnh d·∫°ng**: D√πng **in ƒë·∫≠m** cho t·ª´ kh√≥a.

‚≠ê QUY T·∫ÆC KHI GI·ªöI THI·ªÜU S·∫¢N PH·∫®M:
0. **CH·ª¶ ƒê·ªòNG G·ª¢I √ù**: N·∫øu ng∆∞·ªùi d√πng h·ªèi chung chung, h√£y gi·ªõi thi·ªáu ngay 2-3 m·∫´u.
1. C√¢u d·∫´n: "D·∫°, BlinkoBot c√≥ v√†i g·ª£i √Ω hay cho m√¨nh ƒë√¢y ·∫°:"
2. C·∫•u tr√∫c:
    **<T√™n s·∫£n ph·∫©m>**
    <M√¥ t·∫£ s·∫£n ph·∫©m>
3. KH√îNG d√πng Markdown, KH√îNG ghi ID trong c√¢u.
4. Cu·ªëi c√¢u tr·∫£ l·ªùi ph·∫£i c√≥ [PRODUCTS: id1, id2, id3]
5. T·ªëi ƒëa 3 s·∫£n ph·∫©m.

‚≠ê QUY T·∫ÆC KHI TR·∫¢ L·ªúI C√ÇU H·ªéI CHUNG:
1. Tr·∫£ l·ªùi d·ª±a **CH·ªà** tr√™n "D·ªÆ LI·ªÜU S·∫¢N PH·∫®M HI·ªÜN C√ì" b√™n d∆∞·ªõi.
2. T√≥m t·∫Øt c√°c t√≠nh nƒÉng chung nh·∫•t t·ª´ c√°c s·∫£n ph·∫©m ƒë√≥.
3. KH√îNG ƒë∆∞·ª£c tr·∫£ v·ªÅ [PRODUCTS].

---
D·ªÆ LI·ªÜU S·∫¢N PH·∫®M HI·ªÜN C√ì (D√πng ƒë·ªÉ tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi):
${JSON.stringify(filteredProducts, null, 2)}
---
`;
}

function shouldRecommendProducts(userMessage) {
  const lowerMessage = userMessage.toLowerCase()
  const infoKeywords = [
    "t√≠nh nƒÉng",
    "l√† g√¨",
    "h∆∞·ªõng d·∫´n",
    "c√°ch",
    "l√†m sao",
    "h·ªó tr·ª£",
    "b·∫£o h√†nh",
    "c√†i ƒë·∫∑t",
    "ho·∫°t ƒë·ªông",
    "√Ω nghƒ©a"
  ]

  if (infoKeywords.some((keyword) => lowerMessage.includes(keyword))) {
    return false
  }

  const productKeywords = [
    "s·∫£n ph·∫©m",
    "m·∫´u",
    "xem",
    "mua",
    "gi√°",
    "ƒë·ªìng h·ªì",
    "g·ª≠i",
    "cho t√¥i",
    "hi·ªÉn th·ªã",
    "c√≥ nh·ªØng",
    "lo·∫°i n√†o",
    "gi·ªõi thi·ªáu",
    "ƒë·ªãnh v·ªã"
  ]

  return productKeywords.some((keyword) => lowerMessage.includes(keyword))
}

async function chatAPI(messages) {
  try {
    const lastUserMessage = messages[messages.length - 1]?.content || ""
    const shouldShowProducts = shouldRecommendProducts(lastUserMessage)
    const priceFilter = extractPriceFilter(lastUserMessage)

    const conversationHistory = messages
      .map((msg) => `${msg.role === "user" ? "Ng∆∞·ªùi d√πng" : "BlinkoBot"}: ${msg.content}`)
      .join("\n")

    let filteredProducts = productsData.products
    const lowerMessage = lastUserMessage.toLowerCase()

    let didUserFilter = false;
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ h·ªèi "ƒë·ªãnh v·ªã" kh√¥ng
    const isAskingForLocator = lowerMessage.includes("ƒë·ªãnh v·ªã") || lowerMessage.includes("gps")

    if (isAskingForLocator && shouldShowProducts) {
      // N·∫øu ƒê√öNG, l·ªçc danh s√°ch s·∫£n ph·∫©m
      // CH·ªà gi·ªØ l·∫°i nh·ªØng s·∫£n ph·∫©m c√≥ "GPS" trong 'features'
      console.log("[Filter] L·ªçc s·∫£n ph·∫©m: Ng∆∞·ªùi d√πng h·ªèi 'ƒë·ªãnh v·ªã'. Ch·ªâ l·∫•y s·∫£n ph·∫©m c√≥ GPS.");

      const locatorProducts = filteredProducts.filter(p =>
        p.features && p.features.some(f => f.toLowerCase().includes("gps"))
      );

      if (locatorProducts.length > 0) {
        filteredProducts = locatorProducts;
      } else {
        // Tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y SP n√†o c√≥ GPS, gi·ªØ nguy√™n list
        console.warn("[Filter] Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ 'GPS' trong features. Gi·ªØ nguy√™n list.");
      }
    } else if (shouldShowProducts) {
      // Ng∆∞·ªùi d√πng h·ªèi "d√¢y" (nh∆∞ng kh√¥ng h·ªèi "ƒë·ªãnh v·ªã")
      const isAskingForStrapOnly = lowerMessage.includes("d√¢y") || lowerMessage.includes("ph·ª• ki·ªán");
      if (isAskingForStrapOnly) {
        console.log("[Filter] L·ªçc s·∫£n ph·∫©m: Ch·ªâ l·∫•y D√ÇY ƒêEO (accessories).");
        filteredProducts = filteredProducts.filter(p => p.category === 'accessories');
      }
    }
    // Logic n√†y s·∫Ω ch·∫°y tr√™n danh s√°ch 'filteredProducts' ƒë√£ "s·∫°ch"
    if (priceFilter) {
      didUserFilter = true; // ƒê√°nh d·∫•u ng∆∞·ªùi d√πng c√≥ l·ªçc
      console.log("[Filter] ƒêang l·ªçc theo gi√°:", priceFilter);
      if (priceFilter.min && priceFilter.max) {
        filteredProducts = filteredProducts.filter((p) => p.price >= priceFilter.min && p.price <= priceFilter.max)
      } else if (priceFilter.min) {
        filteredProducts = filteredProducts.filter((p) => p.price >= priceFilter.min)
      } else if (priceFilter.max) {
        filteredProducts = filteredProducts.filter((p) => p.price <= priceFilter.max)
      } else if (priceFilter.around) {
        const range = priceFilter.around * 0.2
        filteredProducts = filteredProducts.filter(
          (p) => p.price >= priceFilter.around - range && p.price <= priceFilter.around + range,
        )
      }
    }

    const isAskingForCheapest = lowerMessage.includes("r·∫ª nh·∫•t");
    const isAskingForMostExpensive = lowerMessage.includes("ƒë·∫Øt nh·∫•t");

    if (isAskingForCheapest && filteredProducts.length > 0) {
      didUserFilter = true; // ƒê√°nh d·∫•u ng∆∞·ªùi d√πng c√≥ l·ªçc
      console.log("[Filter] Ng∆∞·ªùi d√πng h·ªèi 'r·∫ª nh·∫•t'. S·∫Øp x·∫øp v√† l·∫•y 1 s·∫£n ph·∫©m.");
      filteredProducts.sort((a, b) => a.price - b.price);
      filteredProducts = filteredProducts.slice(0, 1);
    } else if (isAskingForMostExpensive && filteredProducts.length > 0) {
      didUserFilter = true; // ƒê√°nh d·∫•u ng∆∞·ªùi d√πng c√≥ l·ªçc
      console.log("[Filter] Ng∆∞·ªùi d√πng h·ªèi 'ƒë·∫Øt nh·∫•t'. S·∫Øp x·∫øp v√† l·∫•y 1 s·∫£n ph·∫©m.");
      filteredProducts.sort((a, b) => b.price - a.price);
      filteredProducts = filteredProducts.slice(0, 1);
    }

    // B∆Ø·ªöC 4: KI·ªÇM TRA L·ªåC R·ªñNG (Logic "m·ªõi")
    if (didUserFilter && filteredProducts.length === 0) {
      console.warn("[Filter] L·ªçc kh√¥ng c√≥ k·∫øt qu·∫£. G·ª≠i m·∫£ng r·ªóng cho AI.");
    }

    // 3. X√¢y d·ª±ng prompt SAU KHI L·ªåC
    // Bi·∫øn 'filteredProducts' l√∫c n√†y ƒë√£ "s·∫°ch"
    let prompt = `${buildSystemPrompt(filteredProducts)}\n\nL·ªãch s·ª≠ h·ªôi tho·∫°i:\n${conversationHistory}\n\nNg∆∞·ªùi d√πng: ${lastUserMessage}\nBlinkoBot:`;

    // Th√™m h∆∞·ªõng d·∫´n t√°c v·ª•
    if (shouldShowProducts) {
      prompt += `\n\n[H∆Ø·ªöNG D·∫™N]: Ng∆∞·ªùi d√πng ƒëang mu·ªën xem s·∫£n ph·∫©m. H√£y th·ª±c hi·ªán "QUY T·∫ÆC KHI GI·ªöI THI·ªÜU S·∫¢N PH·∫®M". B·∫°n PH·∫¢I gi·ªõi thi·ªáu s·∫£n ph·∫©m t·ª´ "D·ªÆ LI·ªÜU S·∫¢N PH·∫®M" v√† th√™m tag [PRODUCTS: id1, id2, id3] v√†o cu·ªëi c√¢u tr·∫£ l·ªùi.`;
      if (priceFilter) {
        prompt += ` (L∆∞u √Ω: Ch·ªâ gi·ªõi thi·ªáu c√°c s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c l·ªçc s·∫µn trong D·ªÆ LI·ªÜU S·∫¢N PH·∫®M).`;
      }
      if (isAskingForLocator) {
        prompt += ` (L∆∞u √Ω: Ng∆∞·ªùi d√πng h·ªèi v·ªÅ "ƒë·ªãnh v·ªã", h√£y t·∫≠p trung v√†o c√°c s·∫£n ph·∫©m c√≥ GPS).`;
      }
    } else {
      prompt += `\n\n[H∆Ø·ªöNG D·∫™N]: Ng∆∞·ªùi d√πng ƒëang h·ªèi th√¥ng tin chung. H√£y th·ª±c hi·ªán "QUY T·∫ÆC KHI TR·∫¢ L·ªúI C√ÇU H·ªéI CHUNG". KH√îNG ƒë∆∞·ª£c th√™m tag [PRODUCTS].`;
    }

    console.log("--- PROMPT BEING SENT ---");
    console.log(prompt);
    console.log("-------------------------");

    console.log("[v1] Sending prompt to Gemini (via proxy)");

    if (!GEMINI_API_KEY) {
      console.error("L·ªñI NGHI√äM TR·ªåNG: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong m√¥i tr∆∞·ªùng.");
      throw new Error("Missing GEMINI_API_KEY");
    }

    // X√¢y d·ª±ng URL cu·ªëi c√πng: PROXY + PATH + KEY
    // N√≥ s·∫Ω c√≥ d·∫°ng: https://gemini-proxy.../v1beta/models/gemini-pro:generateContent?key=AIza...
    const fullApiUrl = `${PROXY_URL}${API_PATH}?key=${GEMINI_API_KEY}`;

    console.log("[v1] Sending prompt via MY Proxy");
    console.log(`[v1] Target URL: ${fullApiUrl}`); // Th√™m log ƒë·ªÉ ki·ªÉm tra

    const response = await fetch(fullApiUrl, { // <--- S·ª≠a th√†nh fullApiUrl
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: { temperature: 0.7, maxOutputTokens: 1500 },
      }),
    });

    if (!response.ok) throw new Error(`Gemini API error: ${response.status}`)

    const data = await response.json()
    let aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || "";
    console.log("[v0] Gemini AI Response:", aiResponse);

    // N·∫øu Gemini kh√¥ng tr·∫£ g√¨ ho·∫∑c ch·ªâ n√≥i "Xin l·ªói..."
    const isBadAIResponse =
      !aiResponse ||
      aiResponse.toLowerCase().includes("xin l·ªói") ||
      aiResponse.length < 10;

    // T·∫°o fallback message n·∫øu AI fail
    if (isBadAIResponse && filteredProducts.length > 0) {
      const fallbackList = filteredProducts.slice(0, 3);
      aiResponse = `D·∫°, BlinkoBot c√≥ v√†i m·∫´u gi√° t·ªët nh·∫•t cho m√¨nh n√® üòÑ:
${fallbackList
          .map(
            (p) =>
              `**${p.name}** ‚Äì ch·ªâ kho·∫£ng **${p.price.toLocaleString("vi-VN")}ƒë**. ${p.description}`
          )
          .join("\n\n")}
[PRODUCTS: ${fallbackList.map((p) => p.id).join(", ")}]`;
      console.log("[Fallback] AI kh√¥ng hi·ªÉu, t·ª± sinh ph·∫£n h·ªìi t·ª´ danh s√°ch l·ªçc.");
    }


    // Extract [PRODUCTS: ...]
    const productMatch = aiResponse.match(/\[PRODUCTS:\s*([^\]]+)\]/)
    let products = []

    if (productMatch) {
      // T·ªët: AI tr·∫£ v·ªÅ s·∫£n ph·∫©m
      const productIds = productMatch[1].split(",").map((id) => id.trim())
      products = filteredProducts.filter((p) => productIds.includes(p.id)).slice(0, 3)
      // X√≥a tag [PRODUCTS] kh·ªèi c√¢u tr·∫£ l·ªùi
      aiResponse = aiResponse.replace(/\[PRODUCTS:[^\]]+\]/g, "").trim()

    } else if (shouldShowProducts) {
      // X·∫•u: AI kh√¥ng tr·∫£ v·ªÅ SP, nh∆∞ng ƒë√°ng l·∫Ω ph·∫£i tr·∫£ v·ªÅ
      const recommendedIds = filteredProducts.slice(0, 3).map((p) => p.id)
      products = filteredProducts.filter((p) => recommendedIds.includes(p.id))
    }

    // Tr·∫£ v·ªÅ object thu·∫ßn
    return {
      message: aiResponse,
      products: products.map((p) => ({
        id: p.id,
        name: p.name,
        price: p.price,
        image: p.image,
        description: p.description,
        features: p.features,
      })),
    }
  } catch (error) {
    console.error("Chat API error:", error)
    return {
      message: "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!",
      products: [],
      error: true
    }
  }
}

// N·∫øu b·∫°n c·∫ßn endpoint cho Express ho·∫∑c fetch, c√≥ th·ªÉ th√™m:
async function chatHandler(req, res) {
  if (req.method !== "POST") {
    res.status(405).json({ message: "Method Not Allowed" })
    return
  }
  try {
    const { messages } = req.body
    const result = await chatAPI(messages)
    res.json(result)
  } catch (error) {
    res.status(500).json({ message: "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!", products: [] })
  }
}

module.exports = { chatHandler, chatAPI };